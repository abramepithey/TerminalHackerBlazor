@page "/terminalhacker"
@inject HttpClient Http

<h1>Terminal Hacker</h1>

<p>This component is the work-in-progress web version of my Terminal Hacker console application.</p>

<button class="btn btn-primary" @onclick="GetEasyWordsAsync">Easy Words</button>
<button class="btn btn-primary" @onclick="GetMediumWordsAsync">Medium Words</button>
<button class="btn btn-primary" @onclick="GetHardWordsAsync">Hard Words</button>
@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn" type="reset" @onclick="ClearWords">Clear</button>
    <table class="table">
        <thead>
            <tr>
                <th>Words</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var word in words)
            {
                <tr>
                    <td>@word.text</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Words> words;

    public void ClearWords()
    {
        words.Clear();
    }

    public async Task GetEasyWordsAsync()
    {
        var wordsConnected = await Http.GetFromJsonAsync<List<Words>>("sample-data/easywords.json");
        words = wordsConnected.ToList();
    }

    public async Task GetMediumWordsAsync()
    {
        var wordsConnected = await Http.GetFromJsonAsync<List<Words>>("sample-data/mediumwords.json");
        words = wordsConnected.ToList();
    }

    public async Task GetHardWordsAsync()
    {
        var wordsConnected = await Http.GetFromJsonAsync<List<Words>>("sample-data/hardwords.json");
        words = wordsConnected.ToList();
    }

    public class Words
    {
        public string text { get; set; }
    }
}
