@page "/terminalhacker"
@inject HttpClient Http

<h1 class="tt-spacing">Terminal Hacker</h1>

<button class="btn-terminal tt-color tt-size mt-1" @onclick="GetEasyWordsAsync">Easy Words</button>
<button class="btn-terminal tt-color tt-size mt-1" @onclick="GetMediumWordsAsync">Medium Words</button>
<button class="btn-terminal tt-color tt-size mt-1" @onclick="GetHardWordsAsync">Hard Words</button>
@if (_words == null)
{
    <p class="tt-size tt-spacing"><em>Select a difficulty!</em></p>
}
else
{
    <button class="btn-terminal tt-color tt-size mt-1" type="reset" @onclick="ClearWords">Clear</button>
    <div class="row my-2">
        @foreach (var word in _selectedWords)
        {
            <div class="col-6">
                <button class="mx-auto btn-terminal tt-size tt-color" @onclick="() => CheckGuess(word)">@word</button>
            </div>
        }
    </div>
    @foreach(var response in _userResponse)
    {
        <div class="row">
            <div class="col-6">
                <p class="tt-size tt-spacing">@response.Key</p>
            </div>
            <div class="col-6">
                <p class="tt-size tt-spacing">@response.Value</p>
            </div>
        </div>
    }
    @if (_selectedWords.Count > 0 && !_userResponse.ContainsKey(_keyword))
    {
        <div class="row">
            <div class="col-6">
                <p class="tt-size tt-spacing">@_tries @(_tries == 1 ? "try" : "tries") remaining.</p>
            </div>
            <div class="col-6">
                <p class="tt-size tt-spacing">@_error</p>
            </div>
        </div>
    }
}

@code {
    private List<Words> _words;
    private List<string> _selectedWords;
    private string _keyword;
    private Dictionary<string, string> _userResponse;
    private string _evaluation;
    private string _error;
    private int _wordPoolLength = 14;
    private int _tries = 4;
    readonly Random _rand = new Random();

    private void ClearWords()
    {
        _words = new List<Words>();
        _selectedWords = new List<string>();
        _keyword = String.Empty;
        _error = String.Empty;
        _userResponse = new Dictionary<string, string>();
        _tries = 4;
    }

    private async Task GetEasyWordsAsync()
    {
        ClearWords();
        var wordsConnected = await Http.GetFromJsonAsync<List<Words>>("sample-data/easywords.json");
        _words = wordsConnected.ToList();
        RandomWordList(_words);
    }

    private async Task GetMediumWordsAsync()
    {
        ClearWords();
        var wordsConnected = await Http.GetFromJsonAsync<List<Words>>("sample-data/mediumwords.json");
        _words = wordsConnected.ToList();
        RandomWordList(_words);
    }

    private async Task GetHardWordsAsync()
    {
        ClearWords();
        var wordsConnected = await Http.GetFromJsonAsync<List<Words>>("sample-data/hardwords.json");
        _words = wordsConnected.ToList();
        RandomWordList(_words);
    }

    private class Words
    {
        public string Text { get; set; }
    }

    private void RandomWordList(List<Words> oldList)
    {
        List<string> tempList = new List<string>();
        while (tempList.Count < _wordPoolLength)
        {
            tempList.Add(oldList[_rand.Next(oldList.Count)].Text);
        }
        _selectedWords = tempList;
        _keyword = _selectedWords[_rand.Next(_selectedWords.Count)];
    }

    private void CheckGuess(string word)
    {
        _error = String.Empty;
        if (_tries == 0 || _userResponse.ContainsKey(_keyword))
            return;
        else if (_userResponse.ContainsKey(word))
        {
            _error = "Please select a new word.";
            return;
        }
        else if (word == _keyword)
            _evaluation = "Good job!";
        else
        {
            CheckLetters(word);
            _tries--;
        }
        if (_tries == 0)
        {
            _evaluation = $"Game Over! The password was {_keyword}";
        }
        _userResponse.Add(word, _evaluation);
    }

    private void CheckLetters(string word)
    {
        int correctChars = word.Where((t, i) => _keyword[i] == t).Count();
        _evaluation = $"You got {correctChars} letters correct.";
    }
}
